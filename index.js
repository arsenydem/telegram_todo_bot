const { Telegraf, Markup, Scenes, session } = require('telegraf')
const { message } = require('telegraf/filters')
require('dotenv').config()
const text = require('./const')

let mongoose = require('mongoose');
mongoose.connect('mongodb://127.0.0.1:27017/telegram-bot');

const { newtodoScene } = require('./scenes/newtodo.js')
const { snewtodoScene } = require('./scenes/snewtodo.js')
const { delnewtodoScene } = require('./scenes/deltodo.js')

const bot = new Telegraf(process.env.BOT_TOKEN)

const { Record } = require('./scenes/newtodo.js')
const stage = new Scenes.Stage([newtodoScene, snewtodoScene, delnewtodoScene])

bot.use(session())
bot.use(stage.middleware())

phrases = ['–ó–∞–º–µ—Ç–∫–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É', '–ó–∞–º–µ—Ç–∫–∞ –ø–æ –¥–∞—Ç–µ', '–°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∑–∞–Ω–æ–≤–æ', '–°–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É', '–ú–µ–Ω—é', '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞', '–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏', '/new', '/my', '/start', '/help', '/support']


bot.start((ctx) => ctx.replyWithHTML(`<b>–ü—Ä–∏–≤–µ—Ç</b>, ` + `<b>${ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}!</b>\n` + `<b>–ë—É–¥—å –∫–∞–∫ –¥–æ–º–∞ üíñ</b>`, Markup.removeKeyboard()))
bot.help((ctx) => ctx.reply(text.commands, Markup.removeKeyboard()))



bot.command('new', async (ctx) => {
    try {
        await ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏</b>', Markup.keyboard(
            [
                [Markup.button.callback('–ó–∞–º–µ—Ç–∫–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É', 'btn_1')],
                [Markup.button.callback('–ó–∞–º–µ—Ç–∫–∞ –ø–æ –¥–∞—Ç–µ', 'btn_2')]
            ]).oneTime().resize())
    } catch (e) {
        console.error(e)
    }
})

bot.command('my', async (ctx) => {
    try {
        let todos = await Record.find({ userId: ctx.message.from.id.toString() })
        let s = `<b>–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:</b>`
        if (todos.length >= 1) {
            for (let i = 0; i < todos.length; i++) {
                if (todos[i].time.includes(' ')) {
                    s += `\n`
                    s += (`${i + 1}. ` + `<blockquote>` + todos[i].text + `</blockquote>` + `–î–∞—Ç–∞: ` + todos[i].time)
                } else {
                    s += `\n`
                    s += (`${i + 1}. ` + `<blockquote>` + todos[i].text + `</blockquote>` + `–¢–∞–π–º–µ—Ä: ` + todos[i].time)
                }
            }
            await ctx.replyWithHTML(`${s}`, Markup.removeKeyboard())
        } else {
            await ctx.replyWithHTML(`<b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫!</b>`, Markup.keyboard(
                [
                    [Markup.button.callback('–°–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É', 'btn_1')],
                    [Markup.button.callback('–ú–µ–Ω—é', 'btn_2')]
                ]).oneTime().resize())
        }
    } catch (e) {
        console.error(e)
    }
})

bot.command('delete', ctx => ctx.scene.enter('deltodolistWizard'))

bot.hears('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∑–∞–Ω–æ–≤–æ', ctx => {
    ctx.scene.enter('deltodolistWizard')
})

const youtubeButton = Markup.button.url('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å', 'https://clck.ru/37VBvR');

bot.command('support', async (ctx) => {
    ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚ù§Ô∏è', Markup.inlineKeyboard([youtubeButton]))
})

bot.hears('–ó–∞–º–µ—Ç–∫–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É', ctx => {
    ctx.scene.enter('todolistWizard')
})

bot.hears('–ó–∞–º–µ—Ç–∫–∞ –ø–æ –¥–∞—Ç–µ', ctx => {
    ctx.scene.enter('stodolistWizard')
})

bot.hears('–°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∑–∞–Ω–æ–≤–æ', async (ctx) => {
    try {
        await ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏</b>', Markup.keyboard(
            [
                [Markup.button.callback('–ó–∞–º–µ—Ç–∫–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É', 'btn_1')],
                [Markup.button.callback('–ó–∞–º–µ—Ç–∫–∞ –ø–æ –¥–∞—Ç–µ', 'btn_2')]
            ]).oneTime().resize())
    } catch (e) {
        console.error(e)
    }
})

bot.hears('–°–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É', async (ctx) => {
    try {
        await ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏</b>', Markup.keyboard(
            [
                [Markup.button.callback('–ó–∞–º–µ—Ç–∫–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É', 'btn_1')],
                [Markup.button.callback('–ó–∞–º–µ—Ç–∫–∞ –ø–æ –¥–∞—Ç–µ', 'btn_2')]
            ]).oneTime().resize())
    } catch (e) {
        console.error(e)
    }
})

bot.hears('–ú–µ–Ω—é', ctx => {
    try {
        ctx.replyWithHTML('<b>–ú–µ–Ω—é</b>', Markup.keyboard(
            [
                [Markup.button.callback('–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞', 'btn_1')],
                [Markup.button.callback('–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏', 'btn_2')]
            ]).oneTime().resize())
    } catch (e) {
        console.log(e)
    }
})

bot.hears('–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞', ctx => {
    ctx.scene.enter('todolistWizard')
})

bot.hears('–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏', async (ctx) => {
    try {
        let todos = await Record.find({ userId: ctx.message.from.id.toString() })
        let s = `<b>–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:</b>`
        if (todos.length >= 1) {
            for (let i = 0; i < todos.length; i++) {
                if (todos[i].time.includes(' ')) {
                    s += `\n`
                    s += (`${i + 1}. ` + `<blockquote>` + todos[i].text + `</blockquote>` + `–î–∞—Ç–∞: ` + todos[i].time)
                } else {
                    s += `\n`
                    s += (`${i + 1}. ` + `<blockquote>` + todos[i].text + `</blockquote>` + `–¢–∞–π–º–µ—Ä: ` + todos[i].time)
                }
            }
            await ctx.replyWithHTML(`${s}`, Markup.removeKeyboard())
        } else {
            await ctx.replyWithHTML(`<b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫!</b>`, Markup.keyboard(
                [
                    [Markup.button.callback('–°–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É', 'btn_1')],
                    [Markup.button.callback('–ú–µ–Ω—é', 'btn_2')]
                ]).oneTime().resize())
        }
    } catch (e) {
        console.error(e)
    }
})

bot.on('text', (ctx) => {
    const userMessage = ctx.message.text
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤–µ —Ñ—Ä–∞–∑
    if (!phrases.includes(userMessage)) {
        ctx.replyWithHTML('<b>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüò•</b>');
    }
});


bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))